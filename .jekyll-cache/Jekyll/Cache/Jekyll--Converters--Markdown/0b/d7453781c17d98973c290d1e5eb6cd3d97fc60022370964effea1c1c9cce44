I"s@<h3 id="1-环境准备">1. 环境准备</h3>

<ul>
  <li>
    <p>neo4j python包：<code class="language-plaintext highlighter-rouge">pip3 install neo4j</code>  和<code class="language-plaintext highlighter-rouge">pip3 install py2neo</code>（这里的py2neo 是python对Neo4j的驱动库,同时这里必须是py2neo版本必须是最新版4，不然会报连接数据库的错误，老版本不兼容的问题）</p>
  </li>
  <li>
    <p>Java8：这里由于neo4j 数据库是依赖于java8的。</p>
  </li>
  <li>
    <p><a href="[ftp://neo4j.55555.io/neo4j-chs/3.5.14/](ftp://neo4j.55555.io/neo4j-chs/3.5.14/)">Neo4j_3.5.14</a>：这里由于neo4j 在中国地区下载慢，并且neo4j3.X版本才支持java8，到4.0版本就是需要java11了。</p>
  </li>
  <li>
    <p><a href="[ftp://neo4j.55555.io/neo4j-desktop/1.2.4/](ftp://neo4j.55555.io/neo4j-desktop/1.2.4/)">Neo4j_Desktop</a>：neo4j的桌面端（可以远程数据库和连接本地数据库，同时包含很多额外的扩展）</p>
  </li>
</ul>

<h3 id="2-连接本地图数据库">2. 连接本地图数据库</h3>

<blockquote>
  <p>py2neo V4 官方文档：https://py2neo.org/v4/index.html</p>
</blockquote>

<p>Neo4j 一共有3种连接方式：</p>

<ul>
  <li>Bolt：bolt://localhost:11005</li>
  <li>HTTP：http://localhost:11006</li>
  <li>HTTPS：https://localhost:11007</li>
</ul>

<p>这里可以通过Neo4j Desktop来查看新建的图数据库（同时设置密码）</p>

<h4 id="21-neo4j数据库语法cypher">2.1 Neo4j数据库语法Cypher</h4>

<ul>
  <li>创建
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create (:Movie {title:"ABC",released:2016})  return p;
</code></pre></div>    </div>
  </li>
  <li>查询</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>match (p: Person) return p; 查询Person类型的所有数据

match (p: Person {name:"sun"}) return p; 查询名字等于sun的人

match( p1: Person {name:"sun"} )-[rel:friend]-&gt;(p2) return p2.name , p2.age 查询sun的朋友的名字和年龄

match (old) ... create (new) create (old)-[rel:dr]-&gt;(new) return new 对已经存在的节点和新建的节点建立关系
</code></pre></div></div>

<ul>
  <li>更新
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MERGE (m:Movie { title:"Cloud Atlas" })
ON CREATE SET m.released = 2012
RETURN m
</code></pre></div>    </div>
  </li>
  <li>筛选过滤
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>match (p1: Person)-[r:friend]-&gt;(p2: Person) 
where p1.name=~"K.+" or p2.age=24 or "neo" in r.rels 
return p1,r,p2
</code></pre></div>    </div>
  </li>
  <li>聚合函数（支持count,sum,avg,min,max）
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATCH (actor:Person)-[:ACTED_IN]-&gt;(movie:Movie)&lt;-[:DIRECTED]-(director:Person)
RETURN actor,director,count(*) AS collaborations
</code></pre></div>    </div>
  </li>
  <li>排序和分页</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATCH (a:Person)-[:ACTED_IN]-&gt;(m:Movie)
RETURN a,count(*) AS appearances
ORDER BY appearances DESC SKIP 3 LIMIT 10;
</code></pre></div></div>

<h4 id="21-图数据库的基本操作py">2.1 图数据库的基本操作py</h4>

<ul>
  <li>这里是通过导入py2neo这个neo4j的第三方库来连接</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">py2neo</span> <span class="kn">import</span> <span class="n">Graph</span><span class="p">,</span><span class="n">Node</span>

<span class="n">graph</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">(</span>
    <span class="s">"http://localhost:11006"</span><span class="p">,</span>
    <span class="n">username</span><span class="o">=</span><span class="s">"neo4j"</span><span class="p">,</span>
    <span class="n">password</span><span class="o">=</span><span class="s">"yy"</span>
<span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>清空数据库
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">graph</span><span class="p">.</span><span class="n">delete_all</span><span class="p">()</span>
</code></pre></div>    </div>
  </li>
  <li>定义节点关系</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="s">'Person'</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'Alice'</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="s">'Person'</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'Bob'</span><span class="p">)</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="s">'KNOWNS'</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span> <span class="o">|</span> <span class="n">r</span>
<span class="n">graph</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>Node查询
```python
    <h1 id="用cql进行查询返回的结果是list">用CQL进行查询，返回的结果是list</h1>
    <p>data1 = graph.data(‘MATCH(p:PersonTest) return p’)
print(“data1 = “, data1, type(data1))</p>
  </li>
</ul>

<h1 id="用find_one方法进行node查找返回的是查找node的第一个node">用find_one()方法进行node查找，返回的是查找node的第一个node</h1>
<p>data2 = graph.find_one(label=’PersonTest’, property_key=’name’, property_value=”李四”)
print (“data2 = “, data2, type(data2))</p>

<h1 id="用find方法进行node查找需要遍历输出类似于mongodb">用find()方法进行node查找,需要遍历输出，类似于mongodb</h1>
<p>data3 = graph.find(label=’PersonTest’)
for data in data3:
    print (“data3 = “, data)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
* 关系查询
```python
relationship = graph.match_one(rel_type='KNOWNS')
print (relationship, type(relationship))
</code></pre></div></div>

<ul>
  <li>更新push
```python
node1 = graph.find_one(label=’PersonTest’, property_key=’name’, property_value=”张三”)
node1[‘age’] = 21
graph.push(node1)
data4 = graph.find(label=’PersonTest’)
for data in data4:
  print (“data4 = “, data)</li>
</ul>

<p>#基于上面的操作，再次定义node1[‘age’] = 99,并执行graph.push(node1)，发现已经更新</p>

<p>node1[‘age’] = 99
graph.push(node1)
data5 = graph.find(label=’PersonTest’)
for data in data5:
    print (“data5 = “, data)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
* 删除Node和Relationship
```python
node = graph.find_one(label='PersonTest', property_key='name', property_value="李四")
relationship = graph.match_one(rel_type='KNOWNS')
graph.delete(relationship)
graph.delete(node)
data6 = graph.find(label='PersonTest')
for data in data6:
    print ("data6 = ", data)
</code></pre></div></div>

<ul>
  <li>多条件查询
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="s">'PersonTest'</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'张三'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">21</span><span class="p">,</span> <span class="n">location</span><span class="o">=</span><span class="s">'广州'</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="s">'PersonTest'</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'李四'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">22</span><span class="p">,</span> <span class="n">location</span><span class="o">=</span><span class="s">'上海'</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="s">'PersonTest'</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'王五'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">21</span><span class="p">,</span> <span class="n">location</span><span class="o">=</span><span class="s">'北京'</span><span class="p">)</span>
<span class="n">r1</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="s">'KNOWS'</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="n">r2</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="s">'KNOWS'</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span> <span class="o">|</span> <span class="n">c</span> <span class="o">|</span> <span class="n">r1</span> <span class="o">|</span> <span class="n">r2</span>
<span class="n">graph</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">data7</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'PersonTest'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">data7</span><span class="p">:</span>
  <span class="k">print</span> <span class="p">(</span><span class="s">"data7 = "</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>单条件查询
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 单条件查询，返回的是多个结果
</span><span class="n">selector</span> <span class="o">=</span> <span class="n">NodeSelector</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
<span class="n">persons</span> <span class="o">=</span> <span class="n">selector</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'PersonTest'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">21</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"data8 = "</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="n">persons</span><span class="p">))</span>
</code></pre></div>    </div>
  </li>
  <li>多条件查询
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">selector</span> <span class="o">=</span> <span class="n">NodeSelector</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
<span class="n">persons</span> <span class="o">=</span> <span class="n">selector</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'PersonTest'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">21</span><span class="p">,</span> <span class="n">location</span><span class="o">=</span><span class="s">'广州'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"data9 = "</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="n">persons</span><span class="p">))</span>
</code></pre></div>    </div>
  </li>
  <li>复杂查询orderby
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># orderby进行更复杂的查询
</span><span class="n">selector</span> <span class="o">=</span> <span class="n">NodeSelector</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
<span class="n">persons</span> <span class="o">=</span> <span class="n">selector</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'PersonTest'</span><span class="p">).</span><span class="n">order_by</span><span class="p">(</span><span class="s">'_.age'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">persons</span><span class="p">:</span>
  <span class="k">print</span> <span class="p">(</span><span class="s">"data10 = "</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="3-中心性算法实验社区算法">3. 中心性算法实验（社区算法）</h4>
<h5 id="31-中心性算法">3.1 中心性算法</h5>

<ul>
  <li>度中心性：度中心性是最简单度量，即为某个节点在网络中的联结数。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATCH (c:Character)-[:INTERACTS]-()
RETURN c.name AS character, count(*) AS degree ORDER BY degree DESC
</code></pre></div>    </div>
  </li>
  <li>加权度中心性：指的是每个节点的权重后的中心性
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATCH (c:Character)-[r:INTERACTS]-()
RETURN c.name AS character, sum(r.weight) AS weightedDegree ORDER BY weightedDegree DESC
</code></pre></div>    </div>
  </li>
  <li>介数中心性:在网络中，一个节点的介数中心性是指其它两个节点的所有最短路径都经过这个节点，则这些所有最短路径数即为此节点的介数中心性。</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATCH (c:Character)
WITH collect(c) AS characters
CALL apoc.algo.betweenness(['INTERACTS'], characters, 'BOTH') YIELD node, score
SET node.betweenness = score
RETURN node.name AS name, score ORDER BY score DESC
</code></pre></div></div>

<ul>
  <li>紧密度中心性：指到网络中所有其他角色的平均距离的倒数。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATCH (c:Character)
WITH collect(c) AS characters
CALL apoc.algo.closeness(['INTERACTS'], characters, 'BOTH') YIELD node, score
RETURN node.name AS name, score ORDER BY score DESC
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="32-pagerank-算法">3.2 PageRank 算法</h5>
<p>PageRank算法源自Google的网页排名。它是一种特征向量中心性(eigenvector centrality)算法。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UNWIND {nodes} AS n
MATCH (c:Character) WHERE c.name = n.name
SET c.pagerank = n.pg
</code></pre></div></div>

<p>可以在Neo4j的图中查询最高PageRank值的节点：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATCH (n:Character)
RETURN n.name AS name, n.pagerank AS pagerank ORDER BY pagerank DESC LIMIT 10
</code></pre></div></div>
:ET